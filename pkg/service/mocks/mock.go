// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/sculptorvoid/langi_backend/pkg/entity"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user entity.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), username, password)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// MockDictionary is a mock of Dictionary interface.
type MockDictionary struct {
	ctrl     *gomock.Controller
	recorder *MockDictionaryMockRecorder
}

// MockDictionaryMockRecorder is the mock recorder for MockDictionary.
type MockDictionaryMockRecorder struct {
	mock *MockDictionary
}

// NewMockDictionary creates a new mock instance.
func NewMockDictionary(ctrl *gomock.Controller) *MockDictionary {
	mock := &MockDictionary{ctrl: ctrl}
	mock.recorder = &MockDictionaryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDictionary) EXPECT() *MockDictionaryMockRecorder {
	return m.recorder
}

// CreateDictionary mocks base method.
func (m *MockDictionary) CreateDictionary(userId int, dictionary entity.Dictionary) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDictionary", userId, dictionary)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDictionary indicates an expected call of CreateDictionary.
func (mr *MockDictionaryMockRecorder) CreateDictionary(userId, dictionary interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDictionary", reflect.TypeOf((*MockDictionary)(nil).CreateDictionary), userId, dictionary)
}

// Delete mocks base method.
func (m *MockDictionary) Delete(userId, dictId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId, dictId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDictionaryMockRecorder) Delete(userId, dictId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDictionary)(nil).Delete), userId, dictId)
}

// GetAllDictionaries mocks base method.
func (m *MockDictionary) GetAllDictionaries(userId int) ([]entity.Dictionary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDictionaries", userId)
	ret0, _ := ret[0].([]entity.Dictionary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDictionaries indicates an expected call of GetAllDictionaries.
func (mr *MockDictionaryMockRecorder) GetAllDictionaries(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDictionaries", reflect.TypeOf((*MockDictionary)(nil).GetAllDictionaries), userId)
}

// GetById mocks base method.
func (m *MockDictionary) GetById(userId, dictId int) (entity.Dictionary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", userId, dictId)
	ret0, _ := ret[0].(entity.Dictionary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockDictionaryMockRecorder) GetById(userId, dictId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockDictionary)(nil).GetById), userId, dictId)
}

// Update mocks base method.
func (m *MockDictionary) Update(userId, dictId int, input entity.UpdateDictionaryInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, dictId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDictionaryMockRecorder) Update(userId, dictId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDictionary)(nil).Update), userId, dictId, input)
}

// MockWord is a mock of Word interface.
type MockWord struct {
	ctrl     *gomock.Controller
	recorder *MockWordMockRecorder
}

// MockWordMockRecorder is the mock recorder for MockWord.
type MockWordMockRecorder struct {
	mock *MockWord
}

// NewMockWord creates a new mock instance.
func NewMockWord(ctrl *gomock.Controller) *MockWord {
	mock := &MockWord{ctrl: ctrl}
	mock.recorder = &MockWordMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWord) EXPECT() *MockWordMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWord) Create(userId, dictId int, word entity.Word) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId, dictId, word)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWordMockRecorder) Create(userId, dictId, word interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWord)(nil).Create), userId, dictId, word)
}

// Delete mocks base method.
func (m *MockWord) Delete(userId, wordId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId, wordId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWordMockRecorder) Delete(userId, wordId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWord)(nil).Delete), userId, wordId)
}

// GetAll mocks base method.
func (m *MockWord) GetAll(userId, dictId int) ([]entity.Word, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userId, dictId)
	ret0, _ := ret[0].([]entity.Word)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockWordMockRecorder) GetAll(userId, dictId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockWord)(nil).GetAll), userId, dictId)
}

// GetById mocks base method.
func (m *MockWord) GetById(userId, wordId int) (entity.Word, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", userId, wordId)
	ret0, _ := ret[0].(entity.Word)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockWordMockRecorder) GetById(userId, wordId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockWord)(nil).GetById), userId, wordId)
}

// Update mocks base method.
func (m *MockWord) Update(userId, wordId int, input entity.UpdateWordInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, wordId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockWordMockRecorder) Update(userId, wordId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWord)(nil).Update), userId, wordId, input)
}
